# -*- coding: utf-8 -*-
"""S-SmoothData adlı not defterinin kopyası

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r74j1oU5lP87Wl8LARroWARTVxaiCU-F

Click [this link](https://colab.research.google.com/drive/1tcwPOB8ZnRrZTiE8VUZsRrXAZ4GSGVFP?usp=sharing) to learn how to change the python version in Colab.  
Click the following links to learn how to import various constants & units:
[link1](https://docs.scipy.org/doc/scipy/reference/constants.html), [link2](https://www.geeksforgeeks.org/scipy-constants/), [link3](https://www.w3schools.com/python/scipy/scipy_constants.php)

---
<center>
<font size=7 color='#80000'>S-SmoothData</font></br>
<font size=5 color='#80000'>(2 points)</font>
</center>

### Aim
>Convert a noisy signal to a clean one by using the moving average algorithm.

### Background
>Smoothing is the process of removing random variations that appear as coarseness in a plot of raw time series data. It reduces the noise to emphasize the signal that can contain trends and cycles. Analysts also refer to the smoothing process as filtering the data.
>
>Developed in the 1920s, the moving average is the oldest process for smoothing data and continues to be a useful tool today. This method relies on the notion that observations close in time are likely to have similar values. Consequently, the averaging removes random variation, or noise, from the data.
---
### List of Tasks
- Your code should read some noisy data (e.g. `filename`) and produce a smoothed out version.
- You can define the following functions :
 - [ ] `moving_average(...)`:  
Read each point of data and replace it with the average of N neighboring data points -- N should be an input to this function.
 - [ ] `chi_square(...)`:  
In order to prevent the resulting data from being too smooth or too rough, you should assess its quality. Calculate the chi-square difference of your input and output curve.
- The main function should read the data and compute the moving average over a set of N's and return the smoothed curve when it finds the desired chi-square difference.


### **Allowed Libraries**
* `math`
* `random`
* `mathplotlib.pyplot` or any other equivalent plotting library
* for constants, see the links on top.


#### Sample Execution
> <a href="https://drive.google.com/uc?export=view&id=1mdezBlCz7SkKAEoce5fa4QZOHQgzRyV2"><img src="https://drive.google.com/uc?export=view&id=1mdezBlCz7SkKAEoce5fa4QZOHQgzRyV2" width="15%"></a>
"""

# Student ID  : 2555522
# Project Name: Smooth Data
# Project ID  : S-GEN-SmoothData
# Description : This code performs data processing by computing a moving average to smooth noisy data and visualizes both the original and smoothed data using matplotlib

# Start coding here and then do "File->Save a copy in Drive" to create your own
import matplotlib.pyplot as plt
import math
import random
data = [
    5.9656, 5.8382, 5.7921, 5.5864, 5.8306, 5.6489, 5.713, 5.747, 5.9489, 5.9822,
    6.2427, 6.6143, 6.9864, 6.8202, 6.8525, 6.9719, 7.3506, 7.7187, 8.3468, 7.8324,
    7.437, 7.3149, 7.4253, 8.2489, 8.2884, 8.4896, 8.7087, 8.454, 8.3164, 8.8912,
    9.608, 13.4782, 13.3211, 13.3209, 13.8486, 14.6739, 14.8517, 16.4035, 16.7,
    17.9148, 18.1978, 18.5024, 18.6151, 18.6121, 18.6905, 18.8115, 18.8875, 19.1793,
    19.453, 20.7994, 26.0511, 26.9299, 26.6921, 27.4071, 28.3073, 28.889, 29.002
]

fID=open("usd_try_data.txt", "w")
for n in data:
  fID.write(str(n) + "\n")
fID.close()

fID=open("usd_try_data.txt")
file1=fID.read()
fID.close()

splitted_line=file1.split()

floated_file=[]
for n in splitted_line:
  floated_file.append(float(n))

# Start date
month = 4
year = 2019

# End date
end_month = 12
end_year = 2023

# List to store the dates
dates = []

# Generate dates month by month
while year < end_year or (year == end_year and month <= end_month):
    # Append the date to the list
    dates.append(f"01/{month:02d}/{year}")

    # Increment the month and year
    month += 1
    if month > 12:
        month = 1
        year += 1



def moving_average(data, N):
    smoothed_data = []
    for i in range(len(data)):
        start = max(0, i - N // 2)
        end = min(len(data), i + N // 2 + 1)
        avg = sum(data[start:end]) / (end - start)
        smoothed_data.append(avg)
    return smoothed_data

def chi_square(original, smoothed):
    chi_sq = sum(((o - s) ** 2) / o for o, s in zip(original, smoothed))
    return chi_sq

def smooth_data(data, target_chi_square, max_N):
    best_N = 1
    best_smoothed = None
    best_chi_square = float('inf')

    for N in range(1, max_N + 1):
        smoothed = moving_average(data, N)
        chi_sq = chi_square(data, smoothed)

        if abs(target_chi_square - chi_sq) < abs(target_chi_square - best_chi_square):
            best_N = N
            best_smoothed = smoothed
            best_chi_square = chi_sq

    return best_smoothed, best_N, best_chi_square


def plot_data(data, smoothed_data, dates):
    plt.figure(figsize=(10, 6))
    plt.plot(dates, data, label='Noisy Data', color='blue', alpha=0.6)
    plt.plot(dates, smoothed_data, label='Smoothed Data', color='red')
    plt.xlabel('Date')
    plt.ylabel('Value')
    plt.title('Noisy vs Smoothed Data')
    plt.legend()
    plt.xticks(dates[::3], rotation=45, minor=False)
    plt.tight_layout()
    plt.show()

# Example usage:
smoothed_data, best_N, chi_sq_diff = smooth_data(floated_file, target_chi_square=0.5, max_N=10)
plot_data(data, smoothed_data, dates)
