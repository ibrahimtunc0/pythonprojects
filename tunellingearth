# -*- coding: utf-8 -*-
"""S-TunnelingEarth adlı not defterinin kopyası

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_m7E0z5TxQtC4kZ2VmD47AvNvLWGKU96

Click [this link](https://colab.research.google.com/drive/1tcwPOB8ZnRrZTiE8VUZsRrXAZ4GSGVFP?usp=sharing) to learn how to change the python version in Colab.  
Click the following links to learn how to import various constants & units:
[link1](https://docs.scipy.org/doc/scipy/reference/constants.html), [link2](https://www.geeksforgeeks.org/scipy-constants/), [link3](https://www.w3schools.com/python/scipy/scipy_constants.php)

---
<center>
<font size=7 color='#80000'>S-TunnelingEarth</font></br>
<font size=4 color='#80000'>One Dimensional Motion with Varying Gravity</font></br>
<font size=5 color='#80000'>(3 points)</font>
</center>

### Aim
<img src="https://drive.google.com/uc?export=view&id=1M33LIh6LmfscK5dSUdnko4i5WXBQ2mHz" width="35%"  align="right"></a>
>Analyze numerically the motion of an object falling through an hypothetical tunnel.
>The tunnel passes through the Earth as shown in the image.

### Background
>In theory, if we know the mass density as a function of distance from the origin, we can calculate the gravitional force on and inside every point in Earth.

---
### List of Tasks
- [ ] For density gradient of Earth, check Wikipedia page of [Earth](https://en.wikipedia.org/wiki/Earth#Internal_structure) and calculate only average densities of **crust, mantle, core** layers
- [ ] Calculate the trajectory of an object starting from the Earth's surface (or outside) with no initial velocity.
- [ ] Your code should run for a sufficient time to observe the expected motion.
- You should either  
  - Plot acceleration, position, velocity vs. time
  - Simulate the trajectory of the particle (See Sample Execution below)
- [ ] You can consult to your instructor for more information.


### **Allowed Libraries**
* `math`
* `random`
* `mathplotlib.pyplot` or any other equivalent plotting library
* You can use `matplotlib.animation` or any other library for animations
* for constants, see the links on top.

#### Sample Execution
><a href="https://drive.google.com/uc?export=view&id=1M8-wpEGK_wPPI6tmmzKBIaDYz15MOUoM"><img src="https://drive.google.com/uc?export=view&id=1M8-wpEGK_wPPI6tmmzKBIaDYz15MOUoM" width="20%"></a>
"""

# Student ID  : 2555522
# Project Name: Tunneling Earth
# Project ID  : S-KIN-TunnelingEarth
# Description : This code simulates the motion of an object falling through vacuumed tunnel in the Earth, taking into account the varying density of different layers of the Earth. It then visualizes this motion using an animation.

import math
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from scipy import constants
from astropy import constants as const

G = constants.G
M_e = const.M_earth.value
R = const.R_earth.value


dt = 10
r = R
v_object = 0
t = 0
simulation_time = 60*80


# Depths in m:
distance_crust = [R, R-35 * (10 ** 3)]
distance_uppermantle = [R-35 * (10 ** 3), R-660 * (10 ** 3)]
distance_lowermantle = [R-660 * (10 ** 3), R-2890 * (10 ** 3)]
distance_outercore = [R-2890 * (10 ** 3), R-5100 * (10 ** 3)]
distance_innercore = [R-5100 * (10 ** 3), 0]
# Calculate the density of layers and turn the units into kg/m^3
density_crust = ((2.2 + 2.9) / 2) * (10 ** 3)
density_uppermantle = ((3.4 + 4.4) / 2) * (10 ** 3)
density_lowermantle = ((3.4 + 5.6) / 2) * (10 ** 3)
density_outercore = ((9.9 + 12.2) / 2) * (10 ** 3)
density_innercore = ((12.8 + 13.1) / 2) * (10 ** 3)

time_data = []
velocity_data = []
position_data = []
acceleration_data=[]


def density(r):
    if abs(r) <= (distance_innercore[0]):
        return density_innercore
    elif abs(r) > (distance_outercore[1]) and abs(r) <= (distance_outercore[0]):
        return density_outercore
    elif abs(r) > (distance_lowermantle[1]) and abs(r) <= (distance_lowermantle[0]):
        return density_lowermantle
    elif abs(r) > (distance_uppermantle[1]) and abs(r) <= (distance_uppermantle[0]):
        return density_uppermantle
    else:
        return density_crust

#Full masses for layers:
innercore_fm=4/3*(distance_innercore[0]**3)*math.pi*density_innercore
outercore_fm=4/3*(distance_outercore[0]**3-distance_outercore[1]**3)*math.pi*density_outercore
lowermantle_fm=4/3*(distance_lowermantle[0]**3-distance_lowermantle[1]**3)*math.pi*density_lowermantle
uppermantle_fm=4/3*(distance_uppermantle[0]**3-distance_uppermantle[1]**3)*math.pi*density_uppermantle

def enclosed_m(r):
  m_enclosed=0
  if abs(r) <= (distance_innercore[0]):
    m_enclosed=4/3*math.pi*(abs(r)**3)
  elif abs(r) > (distance_outercore[1]) and abs(r) <= (distance_outercore[0]):
    m_enclosed=innercore_fm + 4/3*math.pi*(abs(r)**3-distance_outercore[1]**3)*density_outercore
  elif abs(r) > (distance_lowermantle[1]) and abs(r) <= (distance_lowermantle[0]):
    m_enclosed=innercore_fm + outercore_fm + (4/3*math.pi*(abs(r)**3-distance_lowermantle[1]**3)*density_lowermantle)
  elif abs(r) > (distance_uppermantle[1]) and abs(r) <= (distance_uppermantle[0]):
    m_enclosed=innercore_fm + outercore_fm + lowermantle_fm + (4/3*math.pi*(abs(r)**3-distance_uppermantle[1]**3)*density_uppermantle)
  elif abs(r) > (distance_crust[1]) and abs(r) <= (distance_crust[0]):
    m_enclosed=innercore_fm + outercore_fm + lowermantle_fm + uppermantle_fm + (4/3*math.pi*(abs(r)**3-distance_crust[1]**3)*density_crust)
  elif abs(r) > R:
    m_enclosed = M_e
  return m_enclosed

def acceleration(r):
  if r==0:
    return 0
  m_enclosed = enclosed_m(r)
  a=-G*m_enclosed/(r**2)
  return a


while t <= simulation_time:
    time_data.append(t)
    velocity_data.append(v_object)
    position_data.append(r)

    if r<0:
      a = -acceleration(r)
    else:
      a= acceleration(r)
    acceleration_data.append(a)

    v_object += a * dt
    r += v_object * dt
    t += dt


fig, ax = plt.subplots(figsize=(10, 6))
ax.set_xlim(-R, R)
ax.set_ylim(-R, R)
ax.set_aspect('equal')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_title('Motion of an object inside the Earth',fontsize=10, fontname='monospace')


# Plot the Earth as a circle
earth = plt.Circle((0, 0), R, color='blue')
ax.add_patch(earth)

# Plot the object as a red dot
object, = ax.plot([], [], 'ro')

velocity_text = plt.text(0.08, 0.95, '', transform=fig.transFigure, ha='left', fontname='monospace')
ax.add_artist(velocity_text)
total_time_text = plt.text(0.08, 0.9, '', transform=fig.transFigure, ha='left', fontname='monospace')
ax.add_artist(total_time_text)


# Define the animation function that updates the position of the object
def animate(i):
    object.set_data([0], position_data[i])
    velocity_text.set_text('Velocity: {:.2f} m/s'.format(velocity_data[i]))
    total_time_text.set_text('Total time: {:.2f} sec'.format(time_data[i]))
    return object,


# Create an animation object using FuncAnimation
anim = animation.FuncAnimation(fig, animate, frames=len(time_data), interval=dt/1000, blit=True)

anim.save('earth_animation2.gif', writer='pillow', fps=30, dpi=100)
